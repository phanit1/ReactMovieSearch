{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","movie","showName","movieList","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","reset","movieName","axios","then","respond","data","Search","catch","err","console","log","className","style","onSubmit","id","onChange","type","CardGroup","map","tk","Poster","Card","Img","variant","src","height","alt","Body","Title","Text","Year","Country","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAQqBA,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,MAAO,GAAGC,UAAS,EAAMC,UAAU,IAEjD,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,gDAQnB,SAAaE,GACXC,KAAKC,SAAS,CAACR,MAAOM,EAAMG,OAAOC,U,0BAGrC,SAAaJ,GAAQ,IAAD,OAClBA,EAAMK,iBACNL,EAAMG,OAAOG,QACb,IAAMC,EAAYN,KAAKR,MAAMC,MAC7Bc,IAAM,yDAAD,OAA0DD,IAE1DE,MAAK,SAAAC,GAAO,OAAE,EAAKR,SAAS,CAACN,UAAUc,EAAQC,KAAKC,YACpDC,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,MAY5BC,QAAQC,IAAIf,KAAKR,MAAMG,WACvBK,KAAKC,SAAS,CAACP,UAAS,M,oBAI1B,WACE,OACE,sBAAKsB,UAAY,YAAYC,MAAO,CAAC,MAAQ,QAAS,WAAa,SAAnE,UACA,mDACA,uBAAMC,SAAUlB,KAAKF,aAArB,UACE,oEACA,uBAAOqB,GAAK,YAAYhB,MAAOH,KAAKR,MAAMW,MAAOiB,SAAUpB,KAAKJ,eAChE,uBAAS,uBACT,uBAAOyB,KAAK,SAASlB,MAAM,cACtB,uBAEP,8BACA,cAACmB,EAAA,EAAD,UACGtB,KAAKR,MAAMG,UAAU4B,KAAI,SAACC,GAAD,OACxB,8BACe,QAAdA,EAAGC,OAAoB,eAACC,EAAA,EAAD,WACxB,cAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKL,EAAGC,OAAQK,OAAO,QAAQC,IAAI,oBAC3D,eAACL,EAAA,EAAKM,KAAN,WACE,cAACN,EAAA,EAAKO,MAAN,CAAYhB,MAAO,CAAC,MAAQ,SAA5B,SAAuCO,EAAGS,QAC1C,cAACP,EAAA,EAAKQ,KAAN,CAAWjB,MAAO,CAAC,MAAQ,SAA3B,SAAsCO,EAAGW,OACzC,cAACT,EAAA,EAAKQ,KAAN,CAAWjB,MAAO,CAAC,MAAQ,SAA3B,SAAsCO,EAAGY,gBAGnB,6C,GA7DDC,IAAMC,WCIxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a3e45de1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Card from 'react-bootstrap/Card';\nimport CardGroup from 'react-bootstrap/CardGroup';\nimport axios from 'axios';\n\n\n// let movieList = []\nexport default class App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {movie: '',showName:false,movieList:[]};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({movie: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    event.target.reset();\n    const movieName = this.state.movie\n    axios(`https://www.omdbapi.com/?apikey=6cde2c47&type=movie&s=${movieName}`)\n        // .then(res=>res.json())\n        .then(respond=>this.setState({movieList:respond.data.Search}))\n        .catch(err=>console.log(err))\n    // if(movieName === '') {\n    //   alert(\"You cant enter empty\");\n    //   return\n    // }\n    // moviefromapi = \n    // else if(movieList.includes(movieName)) {\n    //   alert(\"You are trying to enter existing task\");\n    //   return;\n    // }\n    // movieList.push(movieName);\n\n    console.log(this.state.movieList)\n    this.setState({showName:true});\n  }\n\n\n  render(){\n    return (\n      <div className = \"container\" style={{\"color\":\"white\", \"marginLeft\":\"250px\"}}>\n      <h1>MOVIES SEARCH APP</h1>\n      <form onSubmit={this.handleSubmit}>\n        <p>Enter the movie you want to search:</p>\n        <input id = \"movieName\" value={this.state.value} onChange={this.handleChange} />\n        <br></br><br></br>\n        <input type=\"submit\" value=\"Search\"/>\n      </form><br></br>\n      {/* <h2>All Tasks</h2> */}\n      <div>\n      <CardGroup>\n        {this.state.movieList.map((tk) => (\n          <div>\n          {tk.Poster !== \"N/A\" ? (<Card>\n          <Card.Img variant=\"top\" src={tk.Poster} height=\"400px\" alt=\"No Poster Found\"/>\n          <Card.Body>\n            <Card.Title style={{\"color\":\"black\"}}>{tk.Title}</Card.Title>\n            <Card.Text style={{\"color\":\"black\"}}>{tk.Year}</Card.Text>\n            <Card.Text style={{\"color\":\"black\"}}>{tk.Country}</Card.Text>\n            {/* <Card.Text style={{\"color\":\"black\"}}>{tk.Language}</Card.Text>\n            <Card.Text style={{\"color\":\"black\"}}>{tk.Actors}</Card.Text> */}\n            </Card.Body></Card>):(<></>)}\n          </div>\n        ))}\n        </CardGroup>\n      </div>\n      \n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}